{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before you turn this problem in, make sure everything runs as expected. First, **restart the kernel** (in the menubar, select Kernel$\\rightarrow$Restart) and then **run all cells** (in the menubar, select Cell$\\rightarrow$Run All).\n",
    "\n",
    "Note that this Pre-class Work is estimated to take **1 hour and 30 minutes**.\n",
    "\n",
    "Make sure you fill in any place that says `YOUR CODE HERE` or \"YOUR ANSWER HERE\", as well as your name and collaborators below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "NAME = \"Simon Andren\"\n",
    "COLLABORATORS = \"\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "ff3288a2b0acfc2e2f917a549d038e5c",
     "grade": false,
     "grade_id": "cell-9e44910e5a73668d",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "# CS110 Pre-class Work - Mergesort and recurrences\n",
    "\n",
    "## Question 1 [time estimate: 20 minutes]\n",
    "\n",
    "First, please read carefully [this note](https://drive.google.com/open?id=1SfrRTKWDb6szsJENgvNF7-u2B96ecaF2), which reviews the MERGE operation in Cormen et al.\n",
    "\n",
    "After reviewing the example above (Cormen et al., Figure 2.3),  you need to manually create similar illustrations as in the example above but this time for the input array:\n",
    "\n",
    "![array](array.png)\n",
    "\n",
    "For this exercise, assume that the call to the algorithm is MERGE(A, 1, 3, 6) and draw different resulting stages of the arrays A, L, and R as the merge algorithm is executed.  You can hand-draw or use any drawing tool to produce panel illustrations, as in the example above.  Include your final drawings in the cell below. Feel free to use additional cells (Markdown or Code) for this question.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "b4d0caf51fb6b587f68db4e806af35d0",
     "grade": true,
     "grade_id": "cell-badbff7790708987",
     "locked": false,
     "points": 0,
     "schema_version": 1,
     "solution": true
    }
   },
   "source": [
    "Doing this prework, I originally started with the input A,1,3,6 but that would give me the arrays [2,6,7] & [8,1,4] . These two arrays are not sorted. Merging these two arrays, since 8 will always be higher than the integers in the first array, A resulted in being [2,6,7,8,1,4,6,9] which is the original unsorted array. I therefore changed and had input A,1,4,8\n",
    "\n",
    "![array](Page1.png)\n",
    "![array](Page2.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "7c9608898d23ecbe07c084ca6d6da655",
     "grade": false,
     "grade_id": "cell-6dd1317d1ea8ab9f",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Question 2 [time estimate: 5 minutes]\n",
    "Now using your understanding of Part I of the merge algorithm, can you think of an efficient way to implement this part in Python? (hint: using Python lists). Give your answer in prose in the cell below."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "9bf35550640c33f366c5cffad7fdf33a",
     "grade": true,
     "grade_id": "cell-4f961721620a6645",
     "locked": false,
     "points": 0,
     "schema_version": 1,
     "solution": true
    }
   },
   "source": [
    "To implement this is Python, we would start by creating two lists, L1 & L2, that would be the two half of the original array A. After that, we would add infinity to the end of each array. Now we could start building up the sorted array. This would be done by comparing the entries in the sorted sublists  to each other. First,  we would compare the first entries in each subarray to another, adding the lowest number to the first entry in the main array. We would then compare the  second entry of the sublist which had the lowest integer to the first entry of the remaining sublist, again adding the lowest number to the main array, this time to position 2. This would be repeated until the enitre main array has been iterated and filled."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "010584ea3a4f00fba43b52bb04cd0ed2",
     "grade": false,
     "grade_id": "cell-84932c7c0c20b750",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Question 3 [time estimate: 20 minutes]\n",
    "\n",
    "Write a Python implementation of the merge pseudocode (both parts). Your Python function must take the same four input arguments as described in the $MERGE(A,p,q,r)$. Test your code by running the example in problem 1 and 2 of this pre-class work. Feel free to come up with additional cases to check if your code is working properly. Your code should return A."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "43760e27d0b385c30476353b3d546a79",
     "grade": false,
     "grade_id": "cell-a67719d65c1ac9f3",
     "locked": false,
     "schema_version": 1,
     "solution": true
    },
    "pixiedust": {
     "displayParams": {}
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 4, 6, 6, 7, 8, 9]\n",
      "[5, 11, 11, 19, 31, 42, 44, 69, 14]\n"
     ]
    }
   ],
   "source": [
    "def merge(A, p, q, r):\n",
    "    \n",
    "    #Finds the number of elements that should include in the first sublist.\n",
    "    n1 = q - p\n",
    "    #Finds the number of elements that should include in the second sublist. \n",
    "    n2 = r - q - 1\n",
    "    \n",
    "    #Define two empty lists that will hold the new lists\n",
    "    L1 = [None for _ in range(n1+1)]\n",
    "    L2 = [None for _ in range(n2+1)]\n",
    "    \n",
    "    #Create a list for each sublist\n",
    "    for i in range(0, n1+1):\n",
    "        L1[i] = A[p + i]\n",
    "    for j in range(0, n2 + 1):\n",
    "        L2[j] = A[q + j + 1]\n",
    "    \n",
    "    #Append infinity to the end of each list\n",
    "    L1.append(float(\"inf\"))\n",
    "    L2.append(float(\"inf\"))\n",
    "    \n",
    "    #Define the start position for the sublist comparison \n",
    "    i = 0\n",
    "    j = 0\n",
    "\n",
    "    #loops over each position in the main array, adding the lowest remaining number of the two subarray to A\n",
    "    for k in range(p, r+1):\n",
    "        if L1[i] <= L2[j]:\n",
    "            A[k] = L1[i]\n",
    "            i += 1\n",
    "        else:\n",
    "            A[k] = L2[j]\n",
    "            j += 1\n",
    "            \n",
    "    return A\n",
    "    raise NotImplementedError()\n",
    "    \n",
    "\n",
    "A = [2,6,7,8,1,4,6,9] \n",
    "A1 = [5,11,19,31,11,42,44,69,14] \n",
    "p = 0\n",
    "q = 3\n",
    "r = 7\n",
    "\n",
    "print(merge(A, p, q, r))\n",
    "print(merge(A1, p, q, r))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "699908274975a6bff4f9fb021e666ce4",
     "grade": true,
     "grade_id": "cell-e98759fe14428af0",
     "locked": true,
     "points": 0,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "# Please ignore this cell. This cell is for us to implement the tests \n",
    "# to see if your code works properly. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "b2d80ef5c8845de0122c6420b853605d",
     "grade": false,
     "grade_id": "cell-49f3f61ee6d72bb9",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Question 4 [time estimate: 5 minutes]\n",
    "\n",
    "Suppose that your Python implementation of the merge algorithm is already working. Read and comment the code for merge sort below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "53611abb1448334a346783091382fb12",
     "grade": false,
     "grade_id": "cell-073a21c6aac8225e",
     "locked": true,
     "schema_version": 1,
     "solution": false
    },
    "pixiedust": {
     "displayParams": {}
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5, 5, 6, 8, 11, 11, 12, 19, 31, 42, 44, 69]\n"
     ]
    }
   ],
   "source": [
    "#import pixiedust\n",
    "#%pixie_debugger\n",
    "def merge_sort(A,p,r):\n",
    "    \"\"\" \n",
    "    Recursive algorithm that will divide a an array A into subparts until there is only 1 element left in each array.\n",
    "    Calls merge which merges and sorts two subarrays  \n",
    "    \n",
    "    Input: \n",
    "    A = Array\n",
    "    p = starting index for the first subarray\n",
    "    r = ending index for the second subarray\n",
    "    \n",
    "    Output\n",
    "    A = The sorted array A\n",
    "    \"\"\"\n",
    "    step_count = 0\n",
    "    if p < r:\n",
    "        q = (p+r)//2\n",
    "        step_count += 1\n",
    "        \n",
    "        merge_sort(A,p,q)\n",
    "        step_count += 1\n",
    "        \n",
    "        merge_sort(A,q+1,r)\n",
    "        step_count += 1\n",
    "        \n",
    "        merge(A,p,q,r)\n",
    "        step_count += 1\n",
    "        \n",
    "    step_count += 1\n",
    "    return(A)\n",
    "\n",
    "A = [2,6,7,8,1,4,6,9,1,4,4,2,3,4,6,7] \n",
    "A1 = [5,11,19,31,11,42,44,69,1,4,6,3,2,5,8,12] \n",
    "\n",
    "print(merge_sort(A1,0,len(A1)-1))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "35fbb3c437b3ba39ede0d87d6719223b",
     "grade": true,
     "grade_id": "cell-a3a71f67390c1f82",
     "locked": true,
     "points": 0,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "# Please ignore this cell. This cell is for us to implement the tests \n",
    "# to see if your code works properly. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "61cfba995efe3c9c37092a650047fdf3",
     "grade": false,
     "grade_id": "cell-5b296f793fefdbfe",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Question 5 [time estimate: 15 minutes]\n",
    "Count the number of steps and time your merge_sort() function with the following input: `list_k = [i for i in range(100*k, 0, -1)] `, where $k= 1, 2, 3, …, 15 $. If you are not familiar with what this piece of code is doing, you may want to check the \"List Comprehension\" section in this [Python Help Sheet](https://drive.google.com/open?id=1paW2ByiraoDQViie0gGxApRN9DKbjHGx).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "cc3f59157e795d05422e849f3e7cc03a",
     "grade": true,
     "grade_id": "cell-8a4233ab58d3d0bb",
     "locked": false,
     "points": 0,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import time\n",
    "time_counter = []\n",
    "for k in range(1,16):\n",
    "    list_k = [i for i in range(100*k, 0, -1)]\n",
    "    start_time = time.time()\n",
    "    merge_sort(list_k, 0, len(list_k)-1)\n",
    "    time_counter.append([time.time() - start_time, 100*k])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "source": [
    "## Question 6 [time estimate: 25 minutes] \n",
    "Use the code you wrote for Lesson \"Measuring algorithms' efficiency\" (i.e., selection sort, bubble sort, insertion sort). Plot the following graphs:\n",
    "* **Graph 1**: 4 lines for **the number of steps** of each of the 4 sorting algorithms (i.e., selection sort, bubble sort, insertion sort, merge sort). Which algorithm performs best? Why? \n",
    "* **Graph 2**: 4 lines for **the timing** of each of the 4 sorting algorithms (i.e., selection sort, bubble sort, insertion sort, merge sort). Which algorithm performs best? Why?\n",
    "\n",
    "Use as many cells as you wish (code cells or markdown cells alike) to complete this question.\n",
    "\n",
    "You may find the section \"Simple 2-Dimensional Plots in Python\" in this [Python Help Sheet](https://drive.google.com/open?id=1paW2ByiraoDQViie0gGxApRN9DKbjHGx) helpful."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "0561f29260f91795736500d62066a4c7",
     "grade": true,
     "grade_id": "cell-d09efb7c7fe55e69",
     "locked": false,
     "points": 0,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0,0.5,'Runtime')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import time\n",
    "time_counter = []\n",
    "for k in range(1,16):\n",
    "    list_k = [i for i in range(100*k, 0, -1)]\n",
    "    start_time = time.time()\n",
    "    merge_sort(list_k, 0, len(list_k)-1)\n",
    "    time_counter.append([time.time() - start_time, 100*k])\n",
    "\n",
    "x = [time_counter[i][1] for i in range(len(time_counter))]\n",
    "y = [time_counter[i][0]for i in range(len(time_counter))]\n",
    "\n",
    "plt.plot(x,y)\n",
    "#raise NotImplementedError()\n",
    "plt.title(\"Plot showing merge_sort runtime for input size n with a reversed input list\")\n",
    "plt.xlabel(\"Input-size\")\n",
    "plt.ylabel(\"Runtime\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "import time\n",
    "%matplotlib inline\n",
    "import seaborn as sns; sns.set()\n",
    "import numpy as np\n",
    "\n",
    "def generate_inputs(type_input, N, interval):\n",
    "    '''\n",
    "    This function generates data of size 1..N in the format of the inputted 'type_input' variable.\n",
    "    --------\n",
    "    Inputs:\n",
    "    -type_input: options are 'Sorted', 'Reversed' or 'Random' that indicate the format of the data generated\n",
    "    -N: maximum size of input list\n",
    "    -interval: interval of sizes for the elements on the list\n",
    "    Outputs:\n",
    "    -A list of lists to be sorted\n",
    "    '''\n",
    "    data = []\n",
    "    for i in range(0, N+1, interval):\n",
    "        if type_input == 'Reversed':\n",
    "            data.append([j for j in range(i,0,-1)])\n",
    "        elif type_input == 'Random': \n",
    "            data.append([random.randint(1,1000) for j in range(i)])\n",
    "        ## uncomment the following line of code for Q2\n",
    "        #elif type_input == 'Sorted':\n",
    "            ## your code here\n",
    "        else:\n",
    "            raise ValueError('This is an unsupported type_input; please try again.')\n",
    "    return data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_histogram_data(input_size, runtimes, confidence_interval, n_bins, \n",
    "                        sorting_algorithm):\n",
    "            '''\n",
    "            This function plots the histogram of runtime.\n",
    "            --------\n",
    "            Inputs:\n",
    "            -input_size: input size of the data to be sorted\n",
    "            -runtimes: list of each runtime for sorting the data\n",
    "            -confidence_interval: the confidence interval to be included in the histogram\n",
    "            -n_bins: number of bins in the histogram\n",
    "            -sorting_algorithm: algorithm function that is being analyzed\n",
    "            Output:\n",
    "            -A histogram of the runtimes (there will be input_size of these)\n",
    "            '''\n",
    "            fig, ax = plt.subplots()\n",
    "            plt.hist(runtimes, bins=n_bins, alpha=0.6)\n",
    "            lower_bound = np.quantile(runtimes, (1/2)*(1-confidence_interval/100))\n",
    "            upper_bound = np.quantile(runtimes, (1/2)*(1+confidence_interval/100))\n",
    "            plt.axvline(x=lower_bound, color='green', linestyle ='--')\n",
    "            plt.axvline(x=upper_bound, color='green', linestyle ='--', \n",
    "                        label=str(int(confidence_interval))+'% CI')\n",
    "            mu = np.mean(runtimes)\n",
    "            plt.axvline(x=mu, color='forestgreen', linewidth=3, label = 'mean')\n",
    "            median = np.median(runtimes)\n",
    "            sigma = np.std(runtimes)\n",
    "            textstr = '\\n'.join(\n",
    "                ['mean: '+\"{:f}s\".format(round(mu, 5)),\n",
    "                 'std: '+\"{:f}s\".format(round(sigma, 5)),\n",
    "                 'median: '+\"{:f}s\".format(round(median, 5))\n",
    "                ]\n",
    "            )\n",
    "            # place a text box in upper left in axes coords\n",
    "            plt.annotate(textstr, xy=(1.05, 0.8), xycoords='axes fraction')\n",
    "            plt.legend(loc='upper right')\n",
    "            #plt.grid()\n",
    "            plt.ylabel('Frequency')\n",
    "            plt.xlabel('Run Time (s)')\n",
    "            plt.title(f'Runtime Distribution N={input_size} - {sorting_algorithm}')\n",
    "            plt.show()\n",
    "            \n",
    "            \n",
    "            \n",
    "def compare_algorithms(data, sorting_algorithms_list, \n",
    "                       n_runs, \n",
    "                       plot_steps = False, plot_runtime = False, \n",
    "                       plot_histogram_runtime = False, \n",
    "                       histogram_input_size = 1000, n_bins = 30, confidence_interval=95):\n",
    "    \"\"\"\n",
    "    This function plots the histograms, number of steps and/or runtimes taken by completing \n",
    "    different sorting algorithms.\n",
    "    --------\n",
    "    Inputs:\n",
    "    -data: list of lists with varying size, e.g. [[0, 1], [0, 1, 2, 3], [0, 1, 2, 3, 4, 5]]\n",
    "    -sorting_algorithms_list: list of algorithm functions\n",
    "    -plot_steps: binary; if True it will produce a lineplot for the number of steps \n",
    "     for all the algorithms as a function of input size\n",
    "    -plot_runtime: binary; if True it will produce a lineplot for the runtime for all the \n",
    "     algorithms as a function of input size\n",
    "    -plot_histogram_runtime: binary; if True it will produce a histogram for the runtime \n",
    "     as a function of input size\n",
    "    -histogram_input_size: data input size for which the histogram will be plotted (default=1000)\n",
    "    -n_bins: number of bins to include in the histogram (default: 30)\n",
    "    -confidence_interval: confidence interval to include in the histograms and plots\n",
    "    \n",
    "    Outputs:\n",
    "    - Plot of the histogram, number of steps and/or runtimes for all the \n",
    "    algorithms included in sorting_algorithms_list\n",
    "    as a function of the input size\n",
    "    \"\"\"\n",
    "    sorting_data = {}\n",
    "    \n",
    "    for ele in data[1:]:\n",
    "        for algo in sorting_algorithms_list:\n",
    "            if algo.__name__ not in sorting_data.keys():\n",
    "                sorting_data[algo.__name__] = {}\n",
    "                sorting_data[algo.__name__][len(ele)] = {}\n",
    "                temp_list = []\n",
    "                for experiments in range(n_runs):\n",
    "                    start = time.time()\n",
    "                    el1 = ele.copy()\n",
    "                    steps = algo(el1)\n",
    "                    temp_list.append(time.time() - start)\n",
    "                sorting_data[algo.__name__][len(ele)]['data'] = temp_list\n",
    "                sorting_data[algo.__name__][len(ele)]['steps'] = steps\n",
    "            else:\n",
    "                sorting_data[algo.__name__][len(ele)] = {}\n",
    "                temp_list = []\n",
    "                for experiments in range(n_runs):\n",
    "                    start = time.time()\n",
    "                    el1 = ele.copy()\n",
    "                    steps = algo(el1)\n",
    "                    temp_list.append(time.time() - start)\n",
    "                sorting_data[algo.__name__][len(ele)]['data'] = temp_list\n",
    "                sorting_data[algo.__name__][len(ele)]['steps'] = steps\n",
    "        \n",
    "        if plot_histogram_runtime and len(ele) == histogram_input_size:\n",
    "            for algo in sorting_algorithms_list:\n",
    "                plot_histogram_data(len(ele), sorting_data[algo.__name__][len(ele)]['data'], \n",
    "                                    confidence_interval, n_bins, algo.__name__)                               \n",
    "                plt.show()\n",
    "    if plot_steps:\n",
    "        for algo in sorting_data.keys():\n",
    "            x_data = sorted(list(sorting_data[algo]))\n",
    "            y_data = [sorting_data[algo][x]['steps'] for x in x_data]\n",
    "            plt.plot(x_data, y_data, '--', label=algo)\n",
    "        plt.xlabel('Input size')\n",
    "        plt.ylabel('Steps')\n",
    "        plt.legend(loc='upper left')\n",
    "        plt.title('Scaling of Sorting Algorithms - Steps', fontweight='bold')\n",
    "        plt.show()\n",
    " \n",
    "    if plot_runtime:\n",
    "        for algo in sorting_data.keys():\n",
    "            x_data = sorted(list(sorting_data[algo]))\n",
    "            y_data = [np.mean(sorting_data[algo][x]['data']) for x in x_data]\n",
    "            y_lower = [np.quantile(sorting_data[algo][x]['data'], (1/2)*(1-confidence_interval/100)) for x in x_data]\n",
    "            y_upper = [np.quantile(sorting_data[algo][x]['data'], (1/2)*(1+confidence_interval/100)) for x in x_data]\n",
    "            ax = sns.lineplot(x_data, y_data, label=algo) \n",
    "            ax.fill_between(x_data, y_lower, y_upper, alpha=0.3)\n",
    "        plt.xlabel('Input size')\n",
    "        plt.ylabel('Time (s)')\n",
    "        plt.legend(loc='upper left')\n",
    "        plt.title('Scaling of Sorting Algorithms - Time (s)', fontweight='bold')\n",
    "        plt.show()\n",
    "    return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "module 'numpy' has no attribute 'quantile'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-14-d98d2a442e9a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     17\u001b[0m                    \u001b[0mplot_histogram_runtime\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m                    \u001b[0mhistogram_input_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mN\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_bins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mn_runs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m                    confidence_interval=confidence_level)\n\u001b[0m",
      "\u001b[0;32m<ipython-input-9-bbb6f135dc71>\u001b[0m in \u001b[0;36mcompare_algorithms\u001b[0;34m(data, sorting_algorithms_list, n_runs, plot_steps, plot_runtime, plot_histogram_runtime, histogram_input_size, n_bins, confidence_interval)\u001b[0m\n\u001b[1;32m     97\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0malgo\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msorting_algorithms_list\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m                 plot_histogram_data(len(ele), sorting_data[algo.__name__][len(ele)]['data'], \n\u001b[0;32m---> 99\u001b[0;31m                                     confidence_interval, n_bins, algo.__name__)                               \n\u001b[0m\u001b[1;32m    100\u001b[0m                 \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mplot_steps\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-9-bbb6f135dc71>\u001b[0m in \u001b[0;36mplot_histogram_data\u001b[0;34m(input_size, runtimes, confidence_interval, n_bins, sorting_algorithm)\u001b[0m\n\u001b[1;32m     15\u001b[0m             \u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplots\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m             \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mruntimes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mn_bins\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m             \u001b[0mlower_bound\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mquantile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mruntimes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mconfidence_interval\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m             \u001b[0mupper_bound\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mquantile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mruntimes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mconfidence_interval\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m             \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxvline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlower_bound\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'green'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinestyle\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0;34m'--'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: module 'numpy' has no attribute 'quantile'"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "N = 500\n",
    "n_runs = 5\n",
    "confidence_level = 95\n",
    "type_of_input_data = 'Random'\n",
    "sorting_algorithms = [selection_sort, insertion_sort, bubble_sort]\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "input_data = generate_inputs(type_input=type_of_input_data, \n",
    "                             N=N, \n",
    "                             interval=N//20)\n",
    "\n",
    "\n",
    "compare_algorithms(data=input_data, sorting_algorithms_list=sorting_algorithms, \n",
    "                   n_runs=n_runs, plot_steps=False, plot_runtime=False, \n",
    "                   plot_histogram_runtime=True, \n",
    "                   histogram_input_size=N, n_bins=n_runs,\n",
    "                   confidence_interval=confidence_level)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def insertion_sort(A):\n",
    "    Step_Count = 0\n",
    "    for j in range(1, len(A)):\n",
    "        Step_Count += 1\n",
    "        \n",
    "        key = A[j]\n",
    "        Step_Count += 1\n",
    "        \n",
    "        i= j-1\n",
    "        Step_Count += 1\n",
    "        \n",
    "        while i >= 0 and A[i]>key:\n",
    "            \n",
    "            A[i+1] = A[i]\n",
    "            Step_Count += 1\n",
    "            \n",
    "            i -= 1\n",
    "            Step_Count += 1\n",
    "        \n",
    "        Step_Count += 1\n",
    "        \n",
    "        A[i+1] = key\n",
    "        Step_Count += 1\n",
    "        \n",
    "    return Step_Count\n",
    "    raise NotImplementedError()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def bubble_sort(A):\n",
    "    Step_Count = 0\n",
    "    \n",
    "    for i in range(0 , len(A)-1): #Loops over all the items in A (i = 0 to len(A)-1)\n",
    "        Step_Count += 1\n",
    "        \n",
    "        for j in range(len(A)-1, i, -1): #Loops backward from the last entry to the entry before the sorted items\n",
    "            Step_Count += 1\n",
    "            \n",
    "            if A[j] < A[j-1]: #If the item to the left is bigger, swap places\n",
    "                \n",
    "                A[j], A[j-1] = A[j-1], A[j]\n",
    "                Step_Count += 1\n",
    "            \n",
    "            Step_Count += 1 #Adds 1 to the step_counter both if it has been \"triggered\" & if it didn't get 'triggered\"\n",
    "    \n",
    "    return Step_Count\n",
    "    raise NotImplementedError()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def selection_sort(A):\n",
    "    Step_Count = 0\n",
    "    \n",
    "    n = len(A)\n",
    "    Step_Count += 1\n",
    "    \n",
    "    for i in range(0, n-2): #Loops through all elements except the last one\n",
    "        Step_Count += 1\n",
    "        \n",
    "        minidx = i #The index of the smalles number is set to i\n",
    "        Step_Count += 1\n",
    "        \n",
    "        for j in range(i, n): #Loops though all the elements from i to the last element\n",
    "            Step_Count += 1\n",
    "            \n",
    "            if A[j] < A[minidx]: #If the value of the current element is less that the value of the current minimum value\n",
    "                \n",
    "                minidx = j #assign the current element index to minidx\n",
    "                Step_Count += 1\n",
    "            \n",
    "            Step_Count += 1                \n",
    "        \n",
    "        A[i], A[minidx] = A[minidx], A[i] #Swaps the elements so the lowest value is in the last element in the sorted sectoin\n",
    "        Step_Count += 1\n",
    "    \n",
    "    return Step_Count\n",
    "    raise NotImplementedError()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
